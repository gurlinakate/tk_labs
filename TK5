import bitarray as ba
import numpy as np
from itertools import combinations

class RMCode:
    
    def __init__(self, r, m):
        self.r = r
        self.m = m
        
        self.n = 2**m
        self.k = self.fun_k(self.r,self.m)
        
    #расчёт переменной k
    def fun_k(self,r,m):
        k = 0
        for i in range(r + 1):
            k += np.math.factorial(m)/(np.math.factorial(m - i)*np.math.factorial(i))
        return int(k)
    
    #создание списка подмножества
    def subsets_J(self):
        arr = [()]
        m1 = range(self.m)
        key = lambda arr: int(''.join(reversed([str(i) for i in arr])))
        for i in range(1, self.r+1,1):
            result = sorted([j for j in combinations(m1, i)], reverse=True, key=key)
            for j in result:
                arr.append(j)
        return arr
    
    #создание списка двоичных представлений
    def binary(self):
        s = []
        for i in range( 2 ** self.m):
            s1 = ''.join(reversed(list(bin(i)[2:])))
            s1 += (self.m - len(s1)) * '0'
            s.append(s1)
        return s
    
    # создание матрицы кода Рида-Маллера  
    def mtrixM(self,t1,t2):
        m = []
        for j in t1:
            mass = []
            for c in t2:
                ones = 1
                for i in j:
                    if c[i] != '0':
                        ones = 0
                        break
                mass.append(ones)
            m.append(mass)
        return m
    
    # кодирование сообщение кода Рида-Маллера
    def coded(self,mess,t3):
        return np.dot(mess,t3) %2
    
    # создание комплементарного подмножества
    def checkSub(self, j):
        m2 = range(self.m)
        return set(m2) - set(j)
    
    # формируем базовый вектор b
    def vectorB(self,t1, t2, t4):
        resul = []
        for v in t2:
            elem = 1
            for i in t4:
                if v[i] != '0':
                    elem = 0
                    break
            resul.append(elem)
        return resul
    
    # формирование всех двоичных представлений сдвигов
    def subsetT(self, t5, j):
        mass = [(list(i)) for i in t2.copy()]
        #print(shifts)
        for g in mass:
            for h in j:
                g[h] = '0'
        mass = np.unique(mass, axis=0)
        #print(shifts)
        return mass
    
    # создание вектора b, соответствующее комплеметнарному подмножеству
    def checkVect(self,t6,t5):
        arr = []
        for s in t6:
            b_c = t5.copy()
            shift_value = int(''.join(list(reversed(s))), 2)
            if shift_value != 0:
                b_c = [0] * shift_value + b_c[:-shift_value]
            arr.append(b_c)
        return arr
    
    # формируем проверочные векторы для кодированного сообщения
    def get_vector(self, J, t5, t2, t4):
        codedJ = self.checkSub(J)
       # print(J_c)
        t = self.subsetT(t2, J)
        res = []
        line = []
        for v in t2:
            elem = 1
            for i in codedJ:
                if v[i] != '0':
                    elem = 0
                    break
            line.append(elem)
        b = line
        for s in t:
            b_copy = b.copy()
            t_value = int(''.join(list(reversed(s))), 2)
            if t_value != 0:
                b_copy = [0] * t_value + b_copy[:-t_value]
            res.append(b_copy)
        return res
    
    # мажоритарное декодирование
    def decode(self, mess,t7,t1,t5,t2,t4):
        i = self.r
        mJ = t1.copy()
        #print(J)
        w = mess.copy()
        dec = [0] * self.k
        #print(decoded)
        v_i = [0] * self.n
        for j in range(len(mJ) - 1, -1, -1):
            J = mJ[j]
            #print(J_j)
            if len(J) != i:
                i -= 1
                try:
                    if len(w) != len(v_i):
                        raise Exception()
                    w = [1 if w[j] != v_i[j] else 0 for j in range(len(w))]
                    v_i = [0] * self.n
                except  Exception:
                    pass
            count = 0
            checked = self.get_vector(J,t5,t2,t4)
            for v in checked:
                if len(w) != len(v):
                    raise Exception()
                multiply = [w[i] * v[i] for i in range(len(w))]
                sum = 0
                for i in multiply:
                    sum ^= i
                count += sum
            size_half = len(checked) // 2
            if count > size_half:
                line = []
                for v in self.binary():
                    elem = 1
                    for i in J:
                        if v[i] != '0':
                            elem = 0
                        break
                    line.append(elem)
                s = line
                dec[j] = 1
                if len(v_i) != len(s):
                    raise Exception()
                v_i = [1 if v_i[j] != s[j] else 0 for j in range(len(v_i))]
            elif count == size_half:
                print("Error can be fixed")
        return dec
        
        
if __name__ == "__main__":
    r = 2
    m = 4
    cur = RMCode(r, m)
    #5.2.1
    print("Task1:" + str(cur.subsets_J()))
    t1 = cur.subsets_J()
    
    #5.2.2
    print("Task2:" + str(cur.binary()))
    t2 = cur.binary()
    #print(t2)
    
    #5.2.3
    print("Task3:" + str(cur.mtrixM(t1,t2)))
    t3 = cur.mtrixM(t1,t2)
    #print(t3)
    
    #5.2.4
    mess = [1,0,0,0,0,0,0,1,0,0,0]
    print("Task4:" + str(cur.coded(mess,t3)))
    
    #5.3.1.1
    j = [1,3]
    print("Task5:" + str(cur.checkSub(j)))
    t4 = cur.checkSub(j)
    
    #5.3.1.2
    t5 = cur.vectorB(t1,t2,t4)
    print("Task6:" + str(cur.vectorB(t1,t2,t4)))
    
    #5.3.1.3
    #print(t5)
    #print(t4)
    t6 = cur.subsetT(t5, j) 
    print("Task7:" + str(cur.subsetT(t5, j)))
    
    #5.3.1.4
    print("Task8:" + str(cur.checkVect(t6,t5)))
    t7 = cur.checkVect(t6,t5)
    
    #5.3.2
    w = [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1]
    print("Task9 :" + str(cur.decode(w,t7,t1,t5,t2,t4)))
