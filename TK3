from sympy import *
from array import array
import numpy as np
import bitarray as ba
import random

class CyclicCodes:
    """docstring"""
 
    def __init__(self, k, n, g):
        """Constructor"""
        self.k = k
        self.n = n
        self.g = g
        
    def get_list(self):
        return [self.k, self.n, self.g]
    
    def encode(self, a):
        c = [0] * self.n
        c[self.n - self.k:self.n] = a
        r = self.remainder(c)
        c[0:self.n - self.k] = r
        return c
        
    def xor(self, a, b):
        return [1 if a[j] != b[j] else 0 for j in range(self.n)]
    
    def remainder(self, c):
        r = np.full(self.n, 0)
        for i in range(self.n):
            r[i] = c[i]
        i = self.n - 1
        while i >= self.n - self.k:
            if (r[i]):
                r[i - (self.n - self.k):i + 1] = r[i - (self.n - self.k):i + 1] ^ self.g
            i = i - 1
        return r[0:len(self.g) - 1]

    def polynomial(a):
        x=Symbol('x')
        pol = a[0]+ a[1]*x+ a[2]*(x**2)+ a[3]*(x**3)
        return pol
    
    def polynomial2(a):
        x=Symbol('x')
        pol = a[0]+ a[1]*x+ a[2]*(x**2)+ a[3]*(x**3) +a[4]*(x**4) +a[5]*(x**5)+a[6]*(x**6)
        return pol
    
    def EncodySys(self, a):
        c = [0,0,0,0,0,0,0]
        c2 = [0,0,0,0,0,0,0]
        c[n-k : n] = a
        r = self.remainder(c)
        c2[n-k : n] = a
        c2[0:n-k]=r[0:n-k]
        return c2
    
    def MakeTable(self,t):
        syndromes = {}
        for err in self.get_lines():
            if self.wt(err) <= t:
                synd = self.remainder(err)
                syndromes[tuple(synd)] = err
        return syndromes
    
    def wt(self, err):
        num = [int(i) for i in err if int(i) == 1]
        return len(num)
    
    def get_lines(self):
        l = []
        for x in range(2 ** self.n - 1):
            n = ""
            while x > 0:
                y = str(x % 2)
                n = y + n
                x = int(x / 2)
            for i in range(self.n - len(n)):
                n = '0' + n
            l.append(n)
        last = '1'
        first = '0'
        for i in range(0,self.n-1):
            last += '1'
            first += '0'
        l.append(last)
        l[0] = first
        return l
    
    def make_err_ba(self, bits: ba.bitarray):
        rand_index = random.randint(0, len(bits) - 1)
        print(f"Create error at index {rand_index}")

        bits[rand_index] =  bits[~rand_index]
        return bits
    
    def encoder(self,path):
        bits = ba.bitarray()
        with open(path, 'rb') as fh2:
            a = bits.fromfile(fh2)
            print(bits)
        j = 0
        coded = []
        i = 0
        bits_len = len(bits)
        while j < bits_len:
            a = list(bits[j:j + self.k])
            while len(a) != self.k:
                a.append(False)
            b = np.zeros(self.k)
            for k in range(0, self.k):
                if a[k]:
                    b[k] = 1
                else:
                    b[k] = 0

            coded[i:i + self.n] = self.encode(b)
            j = j + self.k
            i = i + self.n
        return coded
            
            
    def make_err_function(self, bits: ba.bitarray):
        bits = self.make_err_ba(bits)
        print('error message: ', bits)
        return bits
    
    def decoder(self,coded: ba.bitarray):
        #print(coded)
        bits = ba.bitarray()
        with open('text.txt', 'rb') as fh3:
            a1 = bits.fromfile(fh3)
        bits_len = len(bits)
        j = 0
        i = 0
        res = []
        table = self.MakeTable(t)
        while j < len(coded):
            string = coded[j:j + self.n]
            rem = self.remainder(string)
            if np.count_nonzero(rem) == 0:
                new_str = string[self.k+1:self.n]
                res[i:i + self.k] = new_str
            else:
                table_res = table[tuple(rem)]
                rem_list = list(table_res)
                remlist = [int(n) for n in rem_list]

                new_str = self.xor(string, remlist)
                res[i:i + self.k] = new_str[self.k+1:self.n]

            j = j + self.n
            i = i + self.k
            
        res = res[0:len(res)-(len(res)-bits_len)]
        bits2 = ba.bitarray()
        bits2.extend(res)
        with open('decoded_text.txt', 'wb') as fh:
            bits2.tofile(fh)
            print('decoded text: ', bits2)
 
if __name__ == "__main__":
    k = 7
    n = 15
    g = [1,0,0,0,1,0,1,1,1]
    a = [1,0,0,1]
    t = 2
    cur = CyclicCodes(k,n,g)
    #cur2 = CyclicCodes.polynomial(a)
    #result2 = cur.encode(a)
    #print("Result of task 2 = " +str( result2))
    
    #t = [1,0,1,0,0,0,1]
    #cur3 = CyclicCodes.polynomial2(result2)
    #result3 = cur.remainder(t)
    #print("Polynom of task 3 = " + str(cur3))
    #print("Result of task 3 = " + str(result3))
    
    #cur4 = CyclicCodes.polynomial(a)
    #result4 = cur.EncodySys(a)
    #print("Result of task 4 = " +str(result4))
    
    result5 = cur.MakeTable(t)
    enc = cur.encoder("text.txt")
    error = cur.make_err_function(enc)
    dec = cur.decoder(error)
    '''for key, value in result5.items():
          print("{0}: {1}".format(key,value))'''
